 CLASSE:
 "Estrutura que abstrai um conjunto de objetos com caracteristicas similares. Define o comportamento de seus objetos
 através de métodos e os estados possíveis deste objeto através de atributos. Descre os serviços providos por seus objetos e
 quais informações eles podem armazenar."
 Utilizar substantivos, nomes significativos e considerar o contexto.


 ATRIBUTOS:
 "Elemento de uma classe responsavel por definir sua estrutura de dados. O conjunto deste sera responsavel por
 representar suas caracteristicas e fara parte dos objetos criados a partir de classe."
 A diferença de atributo para variável: O atributo é o que é próprio e peculiar a alguém ou alguma coisa. Já a variável
 está sujeita a modificações e variações, pode variar, é inconstante e instável.
Utilizar substantivos/adjetivos, nomes significativos, observar o contexto e os tipos adequados.


 MÉTODOS:
 "Porção do codigo que é disponibilizada pela classe. É executado quando é feito alguma requisição a ele. Serve para
 identificar quais serviços, ações, que a classe oferece. São responsáveis por definir e realizar um determinado comportamento."
Pode ser utilizado ou não, a depender da situação. Existem dois métodos especiais: construtor e destrutor.
 O metodo construtor é utilizado para a criação. Já o destrutor, serve para auxiliar na destruição do objeto.
 A sobrecarga funciona para mudar a assinatura de acordo com a necessidade. Recebe o nome e parametros que podem ser alterados.
 Utilizar verbos, nomes significativos e observar o contexto.

 OBJETO:
 "É a representação de um conceito/entidade do mundo real, que pode ser fisica (bola, carro, árvore, etc) ou conceitual,
 (viagem, estoque, compra, etc) e possui um significado bem definido para um determinado software. Para esse conceito/entidade,
 deve ser definida inicialmente uma classe a partir da qual posteriormente serão instanciados objetos distintos."

 MENSAGEM:
 "É o processo de ativação de um método de um objeto. Isto ocorre quando uma requisição (chamada) a esse método é realizada,
 assim disparando a execução de seu comportamento descrito por sua classe. Pode também ser direcionada diretamente à classe,
caso a requisição seja a um método estático."

HERANÇA:
"É o relacionamento entre classes em que uma classe chamada subclasse (classe filha, classe derivada) é uma extensão, um subtipo,
de outra classe chamada superclasse (classe pai, classe mãe, classe base). Devido a isto, a subclasse consegue reaproveitar os
atributos e métodos dela. Além dos que venham ser herdados, a subclasse pode definir seus próprios membros."
Em Java, existe apenas um unico tipo de herança: Simples - a classe filha tem só uma classe mãe.
Upcast x Downcast
É possível ser feito Upcast e Downcast. Subir a hierarquia de uma classe (transformar classe filho em classe pai)
ou baixar sua hierarquia (transformar classe pai em classe filho).
Polimorfismo x Sobrescrita
Polimorfismo em herança é quando a mesma ação se comporta de forma diferente. O mesmo método se comporta de forma diferente
de acordo com o objeto.
Sobrescrita em herança é quando a mesma ação PODE se comportar de forma diferente.

ASSOCIAÇÃO:
"Possibilita um relacionamento entre classes/objetos, no qual estes possam pedir ajuda a outras classes/objetos e representar
de forma completa o conceito ao qual se destinam. Neste tipo de relacionamento, as classes e os objetos interagem entre si para
atingir seus objetivos."
Tipos: Estrutural (composição, agregação); Comportamental (dependência).

INTERFACE:
"Define um contrato que deve ser seguido pela classe que a implementa. Quando uma classe implementa uma interface, ela se compromete
a realizar todos os comportamentos que a interface disponibiliza"

PACOTES:
"São uma organização física ou lógica criada para separar classes com responsabilidades distintas. Com isso, espera-se que a aplicação
fique mais organizada e seja possível separar classes de finalidades e representatividades diferentes."
Package (seriam, em outras palavras, as pastas).
Import (para importar de outros package).

VISIBILIDADES:
"Um modificador de acesso tem como finalidade determinar até que ponto uma classe, atributo ou método pode ser usado. A utilização
de moficadores de acesso é fundamental para o uso efetivo da Orientação a Objetos. Algumas boas práticas e conceitos só são atingidos
com o uso correto deles."
Tipos: Private (visivel só dentro da classe), Protected (visível dentro da classe, mesmo pacote e subclasses)
e Public (visivel em qualquer lugar). Também será aplicado aos métodos!


